# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:
  python-app:
    image: test-app
    build:
      context: ./python-app
      #Build variables
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
        UID: ${UID}
    env_file:
        .env
    #container variables
    environment:
        - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
        - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
        - PG_HOST=${PG_HOST}
        - PG_NAME=${PG_DATABASE}
        - PG_USER=${PG_USER}
        - PG_PASSWORD=${PG_PASSWORD}
    user: ${UID}
    stdin_open: true   # ← enables interactive mode
    tty: true          # ← attaches a TTY
    depends_on:
        postgres-db:
            condition: service_healthy
    command: ["python", "main.py"]


  postgres-db:
    image: postgres:17.5-alpine3.22
    restart: always
    volumes:
        - db-data:/var/lib/postgresql/data
        - ./postgres-db/init.sql:/docker-entrypoint-initdb.d/init.sql #define initialization script to create user localhost
    env_file: .env
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      PGUSER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_HOST: ${PG_HOST} #host name must be equal as image name
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${PG_USER} -d ${PG_DATABASE}'"]
      interval: 10s
      timeout: 10s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: new_user@gmail.com
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}
    ports:
      - "80:80"
      
volumes:
  db-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

