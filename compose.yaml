services:

  #DB postgres
  bill-db:
    image: postgres:17.5-alpine3.22
    restart: always
    volumes:
        - db-data:/var/lib/postgresql/data
        - ./bill-db/init.sql:/docker-entrypoint-initdb.d/init.sql #define initialization script to create user localhost
    env_file: .env
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      PGUSER: ${PG_USER_BACKEND}
      POSTGRES_PASSWORD: ${PG_PASSWORD_BACKEND}
      POSTGRES_HOST: ${PG_HOST} #host name must be equal as image name
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${PG_USER_BACKEND} -d ${PG_DATABASE}'"]
      interval: 10s
      timeout: 10s
      retries: 5

  #ETL
  python-etl:
    #image: ghcr.io/riccardo-cpt/dpage/python-etl #this image is contained in Github container registry
    build:
      context: ./python-etl
      dockerfile: Dockerfile
      #Build variables
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
        UID: ${UID}
    env_file:
        .env
    #container variables
    environment:
        - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
        - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
        - PG_HOST=${PG_HOST}
        - PG_NAME=${PG_DATABASE}
        - PG_USER=${PG_USER_BACKEND}
        - PG_PASSWORD=${PG_PASSWORD_BACKEND}
    user: ${UID}
    depends_on:
        bill-db:
            condition: service_healthy
    command: ["python", "main.py"]
      
  #Backend
  python-api:
    #image: ghcr.io/riccardo-cpt/dpage/python-api #this image is contained in Github container registry
    build:
      context: ./python-api
      dockerfile: Dockerfile
      #Build variables
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
        UID: ${UID}
    env_file:
        .env
    
    # INTERACTIVE MODE FOR DEBUG PURPOSES
    stdin_open: true # Docker runs the container with an open stdin
    tty: true # Allocates a pseudo-TTY

    #container variables
    environment:
        - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
        - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
        - PG_HOST=${PG_HOST}
        - PG_NAME=${PG_DATABASE}
        - PG_USER=${PG_USER_BACKEND}
        - PG_PASSWORD=${PG_PASSWORD_BACKEND}
    user: ${UID}
    depends_on:
        bill-db:
            condition: service_healthy
    ports:
      - "8000:8000"
    command: sh # Override the default command to start an interactive shell
    #command: ["python", "main.py"]

  #pgadmin
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: new_user@gmail.com
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD_BACKEND}
    ports:
      - "80:80"
    volumes:
    - pgadmin-data:/var/lib/pgadmin #store connection information

      
volumes:
  db-data:
  pgadmin-data:

